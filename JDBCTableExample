import static JDBCExamples.createPropsShort;
import static JDBCExamples.getConnection;
import static JDBCExamples.loadDriver;
import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
 
//** @author mutagen *//*
public class JDBCTableExample extends JFrame {
 
    static class TableFromDatabase extends JFrame {
 
        public TableFromDatabase(Connection connection) {
 
            Vector columnNames = new Vector();
            Vector data = new Vector();
 
            try {
                //  прочитаем всё из таблицы
                String sql = "Select * from phones";
                Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery(sql);
                ResultSetMetaData md = rs.getMetaData();
                int columns = md.getColumnCount();
 
                //  получим имена колонок
                for (int i = 1; i <= columns; i++) {
                    columnNames.addElement(md.getColumnName(i));
                }
 
                //  считаем ряды
                while (rs.next()) {
                    Vector row = new Vector(columns);
                    for (int i = 1; i <= columns; i++) {
                        row.addElement(rs.getObject(i));
                    }
                    data.addElement(row);
                }
                rs.close();
                stmt.close();
                connection.close();
            } catch (Exception e) {
                System.out.println(e);
            }
 
            //  создадим таблицу с данными из БД
            JTable table = new JTable(data, columnNames) {
                public Class getColumnClass(int column) {
                    for (int row = 0; row < getRowCount(); row++) {
                        Object o = getValueAt(row, column);
                        if (o != null) {
                            return o.getClass();
                        }
                    }
                    return Object.class;
                }
            };
 
            JScrollPane scrollPane = new JScrollPane(table);
            getContentPane().add(scrollPane);
            JPanel buttonPanel = new JPanel();
            getContentPane().add(buttonPanel, BorderLayout.SOUTH);
        }
 
    }
 
    public static void main(String[] args) throws Exception {
        Connection con = prepareData();
        TableFromDatabase frame = new TableFromDatabase(con);
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }
 
//    подготовим таблицу и данные для отображения и вернём соединение с базой
    static Connection prepareData() throws Exception {
        JDBCExamples jDBCExamples = new JDBCExamples();
        loadDriver("com.mysql.jdbc.Driver");
        Connection connMysql = DriverManager.getConnection("jdbc:mysql://localhost:3306/article", "user", "user"); 
        String usetable = "use article;";
        Statement stH2 = connMysql.createStatement();
        stH2.execute(usetable);
        return connMysql;
    }
    
    public static Class loadDriver(String driverFullName) throws ClassNotFoundException {
        Class c = Class.forName(driverFullName);
        //System.out.println(c);
        return c;
    }
}
